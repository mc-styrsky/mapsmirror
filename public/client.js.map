{
  "version": 3,
  "sources": ["../src/client/utils/createHTMLElement.ts", "../src/client/containers/infoBox.ts", "../src/client/containers/mapContainer.ts", "../src/client/globals/settings.ts", "../src/common/extractProperties.ts", "../src/client/globals/position.ts", "../src/client/sphericCircle.ts", "../src/client/utils/frac.ts", "../src/client/utils/lat2y.ts", "../src/client/utils/lon2x.ts", "../src/client/utils/min2rad.ts", "../src/client/utils/nm2px.ts", "../src/client/utils/x2lon.ts", "../src/client/utils/y2lat.ts", "../src/client/canvases/crosshairs.ts", "../src/client/globals/mouse.ts", "../src/client/utils/px2nm.ts", "../src/client/globals/units.ts", "../src/client/utils/rad2deg.ts", "../src/client/updateInfoBox.ts", "../src/client/utils/imagesToFetch.ts", "../src/client/canvases/map/drawImage.ts", "../src/client/canvases/map/navionicsWatermark.ts", "../src/client/canvases/map/drawNavionics.ts", "../src/client/canvases/map/drawCachedImage.ts", "../src/client/canvases/mapCanvas.ts", "../src/client/canvases/net.ts", "../src/client/containers/overlayContainer.ts", "../src/client/redraw.ts", "../src/client/containers/menu/baselayerMenu.ts", "../src/client/containers/menu/coordsToggle.ts", "../src/client/containers/menu/iconButton.ts", "../src/client/containers/menu/crosshairToggle.ts", "../src/client/containers/menu/overlayToggle.ts", "../src/client/containers/menu/navionicsToggle.ts", "../src/client/containers/menu/vfdensityToggle.ts", "../src/client/containers/menuContainer.ts", "../src/client/getUserLocation.ts", "../src/client/events/oninput.ts", "../src/client/events/onmouse.ts", "../src/client/index.ts"],
  "sourcesContent": ["export function createHTMLElement<T extends keyof HTMLElementTagNameMap> (params: Partial<Omit<HTMLElementTagNameMap[T], 'dataset' | 'style'>> & {\n  classes?: string[];\n  dataset?: Partial<HTMLElementTagNameMap[T]['dataset']>,\n  style?: Partial<HTMLElementTagNameMap[T]['style']>;\n  tag: T;\n  zhilds?: (HTMLElement | string | null | undefined)[];\n}): HTMLElementTagNameMap[T] {\n  const { classes, dataset, style, tag, zhilds, ...data } = params;\n\n  const element = document.createElement(tag);\n\n  Object.entries(data).forEach(([k, v]) => element[k] = v);\n\n  if (classes) classes.forEach(c => element.classList.add(c));\n  if (dataset) Object.entries(dataset).forEach(([k, v]) => element.dataset[k] = v);\n  if (style) Object.entries(style).forEach(([k, v]) => element.style[k] = v);\n  if (zhilds) zhilds.forEach(child => {\n    if (!child) return;\n    if (typeof child === 'string') element.append(document.createTextNode(child));\n    else element.append(child);\n  });\n  return element;\n}\n", "import { createHTMLElement } from '../utils/createHTMLElement';\n\n\nexport const infoBox = createHTMLElement({\n  classes: ['float-end'],\n  style: {\n    backgroundColor: '#80808080',\n    borderBottomLeftRadius: '1em',\n    padding: '0.3em',\n  },\n  tag: 'div',\n  zhilds: [],\n});\n", "import { createHTMLElement } from '../utils/createHTMLElement';\n\nexport const mapContainer = createHTMLElement({\n  style: {\n    left: '0px',\n    position: 'absolute',\n    top: '0px',\n    zIndex: '-200',\n  },\n  tag: 'div',\n  zhilds: [],\n});\n", "import type { Baselayers, Layers } from '../../common/types/layers';\n\ntype Order= Layers | {source: Layers, alpha: number}\n\nconst order: Order[] = [\n  'osm',\n  'openseamap',\n  'navionics',\n  { alpha: 0.5, source: 'vfdensity' },\n];\nexport const settings: {\n  tiles:{\n    baselayers: Baselayers[]\n    enabled: Partial<Record<Layers, boolean>>\n    order: Order[]\n  }\n} = {\n  tiles: {\n    baselayers: [\n      '',\n      'osm',\n      'googlesat',\n      'googlestreet',\n      'googlehybrid',\n      'gebco',\n      'bingsat',\n      'bluemarble',\n    ],\n    enabled: Object.fromEntries(order\n    .map(e => typeof e === 'string' ? e : e.source)\n    .filter(e => e !== 'openseamap')\n    .map(e => [e, true])),\n    order,\n  },\n};\n", "export function extractProperties<T extends object> (\n  obj: Record<string, any>,\n  builder: { [P in keyof T]: (val?: any) => T[P] },\n): T {\n  return Object.entries(builder).reduce((ret, entry) => {\n    const [key, constructor]: [string, any] = entry;\n    ret[key] = constructor(obj[key]);\n    return ret;\n  }, {} as T);\n}\n", "import type { XYZ } from '../../common/types/xyz';\nimport { extractProperties } from '../../common/extractProperties';\n\n\nconst { ttl, x, y, z } = extractProperties(Object.fromEntries(new URL(window.location.href).searchParams.entries()), {\n  ttl: val => parseInt(val ?? 0),\n  x: val => parseFloat(val ?? 2),\n  y: val => parseFloat(val ?? 2),\n  z: val => parseInt(val ?? 2),\n});\n\nexport const position = {\n  map: <XYZ> { x, y, z },\n  show: { crosshair: true },\n  tiles: 1 << z,\n  ttl,\n  user: {\n    accuracy: 0,\n    latitude: 0,\n    longitude: 0,\n    timestamp: 0,\n  },\n  x,\n  y,\n  z,\n};\n", "export type LatLon = [number, number, boolean];\n\nexport const sphericCircle = (lat: number, lon: number, radius: number, steps = 256): LatLon[] => {\n  const sinRadius = Math.sin(radius);\n  const cosRadius = Math.cos(radius);\n  const sinLat = Math.sin(lat);\n  const cosLat = Math.cos(lat);\n\n  const pi2 = Math.PI * 2;\n\n  const points: LatLon[] = [];\n  for (let step = 0; step <= steps; step++) {\n    const omega = step / steps * pi2;\n    const { lat2, lon2 } = sphericLatLon({ cosLat, cosRadius, lat, omega, radius, sinLat, sinRadius });\n    if (step === 0) points.push([lat2, lon + Math.abs(lon2), false]);\n    else if (step === steps / 2) {\n      points.push([lat2, lon + Math.abs(lon2), true]);\n      points.push([lat2, lon - Math.abs(lon2), false]);\n    }\n    else if (step === steps) points.push([lat2, lon - Math.abs(lon2), true]);\n    else points.push([lat2, lon + lon2, true]);\n  }\n  return points;\n};\n\nexport const sphericLatLon = ({ cosLat, cosRadius, lat, omega, radius, sinLat, sinRadius }: { lat: number; omega: number; radius: number; sinRadius?: number; cosRadius?: number; sinLat?: number; cosLat?: number; }) => {\n  sinRadius ??= Math.sin(radius);\n  cosRadius ??= Math.cos(radius);\n  sinLat ??= Math.sin(lat);\n  cosLat ??= Math.cos(lat);\n\n  const pi2 = 2 * Math.PI;\n  const lonSign = omega - pi2 * Math.floor(omega / pi2) > Math.PI ? -1 : 1;\n\n\n  const sinLat2 = Math.max(-1, Math.min(Math.cos(omega) * cosLat * sinRadius + sinLat * cosRadius, 1));\n  const lat2 = Math.asin(sinLat2);\n  const cosLat2 = Math.sqrt(1 - sinLat2 * sinLat2);\n  const cosLon2 = Math.max(-1, Math.min((cosRadius - sinLat * sinLat2) / cosLat / cosLat2, 1));\n  const lon2 = Math.acos(cosLon2) * lonSign;\n\n  const cosOmega2 = (sinLat - sinLat2 * cosRadius) / (cosLat2 * sinRadius);\n  return { cosOmega2, lat2, lon2 };\n};\n", "export const frac = (x: number) => x - Math.floor(x);\n", "import { position } from '../globals/position';\n\nexport const lat2y = (lat: number, tiles = position.tiles) => {\n  return (0.5 - Math.asinh(Math.tan(lat)) / Math.PI / 2) * tiles;\n};\n", "import { position } from '../globals/position';\n\nexport const lon2x = (lon: number, tiles = position.tiles) => (lon / Math.PI / 2 + 0.5) * tiles;\n", "export const min2rad = (min: number) => min / 60 / 180 * Math.PI;\n", "import { position } from '../globals/position';\nimport { tileSize } from '../index';\n\nexport const nm2px = (lat: number) => {\n  const stretch = 1 / Math.cos(lat);\n  return position.tiles * tileSize / 360 / 60 * stretch;\n};\n", "import { position } from '../globals/position';\n\nexport const x2lon = (x: number, tiles = position.tiles) => (x / tiles - 0.5) * Math.PI * 2;\n", "import { position } from '../globals/position';\n\nexport const y2lat = (y: number, tiles = position.tiles) => Math.asin(Math.tanh((0.5 - y / tiles) * 2 * Math.PI));\n", "import type { Size } from '../../common/types/size';\nimport type { XYZ } from '../../common/types/xyz';\nimport { position } from '../globals/position';\nimport { tileSize } from '../index';\nimport { sphericCircle, sphericLatLon } from '../sphericCircle';\nimport { createHTMLElement } from '../utils/createHTMLElement';\nimport { frac } from '../utils/frac';\nimport { lat2y } from '../utils/lat2y';\nimport { lon2x } from '../utils/lon2x';\nimport { min2rad } from '../utils/min2rad';\nimport { nm2px } from '../utils/nm2px';\nimport { x2lon } from '../utils/x2lon';\nimport { y2lat } from '../utils/y2lat';\n\nexport const createCrosshairsCanvas = ({\n  height,\n  width,\n  x,\n  y,\n}: Pick<XYZ, 'x' | 'y'> & Size) => {\n  const canvas = createHTMLElement({\n    height,\n    style: {\n      height: `${height}px`,\n      position: 'absolute',\n      width: `${width}px`,\n    },\n    tag: 'canvas',\n    width,\n  });\n  const context = canvas.getContext('2d');\n  if (!position.show.crosshair || !context) return canvas;\n  const lat = y2lat(y);\n  const lon = x2lon(x);\n\n  const milesPerTile = 100 / nm2px(lat);\n  const scale = Math.log10(milesPerTile);\n  const scaleFloor = Math.floor(scale);\n  const scaleFrac = frac(scale);\n\n  const milesPerArc = Math.pow(10, scaleFloor) * (scaleFrac < 0.3 ? 1 : scaleFrac > 0.7 ? 5 : 2);\n  const milesPerDiv = milesPerArc / 10;\n\n  context.translate(width / 2, height / 2);\n  let minLast = 0;\n  context.beginPath();\n  context.strokeStyle = '#ff0000';\n  context.moveTo(- 5, 5);\n  context.lineTo(5, - 5);\n  context.moveTo(5, 5);\n  context.lineTo(- 5, - 5);\n  context.stroke();\n  for (let minArc = milesPerArc; minArc < 10800; minArc += milesPerArc) {\n    const radiusX = nm2px(lat) * minArc;\n    if (radiusX > canvas.width) break;\n\n    const radDiv = min2rad(minArc);\n\n    const circlePoints = sphericCircle(lat, lon, radDiv).map(([latPoint, lonPoint, draw]) => ({\n      draw,\n      tx: (lon2x(lonPoint) - x) * tileSize,\n      ty: (lat2y(latPoint) - y) * tileSize,\n    }));\n    context.beginPath();\n    context.strokeStyle = '#ff0000';\n    circlePoints\n    .forEach(({ draw, tx, ty }, idx) => {\n      if (draw) context.lineTo(tx, ty);\n      else context.moveTo(tx, ty);\n      if (idx === 32) context.strokeText(`${minArc.toFixed(Math.max(0, -scaleFloor))}nm`, tx, ty);\n    });\n    context.stroke();\n\n    const piHalf = Math.PI / 2;\n\n    context.beginPath();\n\n    for (let minDiv = minLast + milesPerDiv; minDiv < minArc; minDiv += milesPerDiv) {\n      const radDiv = min2rad(minDiv);\n      if (lat + radDiv < piHalf) {\n        const top = (lat2y(lat + radDiv) - y) * tileSize;\n        context.moveTo(- 5, top);\n        context.lineTo(5, top);\n      }\n      if (lat - radDiv > - piHalf) {\n        const bottom = (lat2y(lat - radDiv) - y) * tileSize;\n        context.moveTo(- 5, bottom);\n        context.lineTo(5, bottom);\n      }\n      const { cosOmega2, lat2, lon2 } = sphericLatLon({ lat, omega: piHalf, radius: radDiv });\n      const sinOmega2 = Math.sqrt(1 - cosOmega2 * cosOmega2);\n\n\n      context.moveTo(\n        (lon2x(lon + lon2) - x) * tileSize + cosOmega2 * 5,\n        (lat2y(lat2) - y) * tileSize - sinOmega2 * 5,\n      );\n      context.lineTo(\n        (lon2x(lon + lon2) - x) * tileSize - cosOmega2 * 5,\n        (lat2y(lat2) - y) * tileSize + sinOmega2 * 5,\n      );\n      context.moveTo(\n        (lon2x(lon - lon2) - x) * tileSize - cosOmega2 * 5,\n        (lat2y(lat2) - y) * tileSize - sinOmega2 * 5,\n      );\n      context.lineTo(\n        (lon2x(lon - lon2) - x) * tileSize + cosOmega2 * 5,\n        (lat2y(lat2) - y) * tileSize + sinOmega2 * 5,\n      );\n\n      context.strokeStyle = '#ff0000';\n    }\n    context.stroke();\n    minLast = minArc;\n  }\n  return canvas;\n};\n", "export const mouse = {\n  down: false,\n  x: 0,\n  y: 0,\n};\n", "import { position } from '../globals/position';\nimport { tileSize } from '../index';\n\n\nexport const px2nm = (lat: number) => {\n  const stretch = 1 / Math.cos(lat);\n  return 360 * 60 / position.tiles / tileSize / stretch;\n};\n", "export const units = {\n  coords: <'d' | 'dm' | 'dms'> 'dm',\n};\n", "import { units } from '../globals/units';\n\ntype CoordsParams = {phi: number, pad: number, axis: string};\nconst func: Record<typeof units.coords, (CoordsParams) => string> = {\n  d: ({ axis = ' -', pad = 0, phi }) => {\n    let deg = Math.round(phi * 180 / Math.PI % 360 * 100000) / 100000;\n    while (deg > 180) deg -= 360;\n    while (deg < -180) deg += 360;\n\n    return `${\n      axis[deg < 0 ? 1 : 0] ?? ''\n    }${\n      (deg < 0 ? - deg : deg).toFixed(5).padStart(pad + 6, '0')\n    }\u00B0`;\n  },\n  dm: ({ axis = ' -', pad = 0, phi }: CoordsParams) => {\n    let deg = Math.round(phi * 180 / Math.PI % 360 * 60000) / 60000;\n    while (deg > 180) deg -= 360;\n    while (deg < -180) deg += 360;\n    const degrees = deg | 0;\n    const minutes = (Math.abs(deg) - Math.abs(degrees)) * 60;\n\n    return `${\n      axis[deg < 0 ? 1 : 0] ?? ''\n    }${\n      (deg < 0 ? - degrees : degrees).toFixed(0).padStart(pad, '0')\n    }\u00B0${\n      minutes.toFixed(3).padStart(6, '0')\n    }'`;\n  },\n  dms: ({ axis = ' -', pad = 0, phi }: CoordsParams) => {\n    let deg = Math.round(phi * 180 / Math.PI % 360 * 360000) / 360000;\n    while (deg > 180) deg -= 360;\n    while (deg < -180) deg += 360;\n    const degrees = deg | 0;\n    const min = Math.round((Math.abs(deg) - Math.abs(degrees)) * 360000) / 6000;\n    const minutes = min | 0;\n    const seconds = (min - minutes) * 60;\n\n    return `${\n      axis[deg < 0 ? 1 : 0] ?? ''\n    }${\n      (deg < 0 ? - degrees : degrees).toFixed(0).padStart(pad, '0')\n    }\u00B0${\n      minutes.toFixed(0).padStart(2, '0')\n    }'${\n      seconds.toFixed(2).padStart(5, '0')\n    }\"`;\n  },\n};\n\nexport const rad2deg = ({ axis = ' -', pad = 0, phi }: CoordsParams) => func[units.coords]({ axis, pad, phi });\n", "import { infoBox } from './containers/infoBox';\nimport { mouse } from './globals/mouse';\nimport { position } from './globals/position';\nimport { container, tileSize } from './index';\nimport { createHTMLElement } from './utils/createHTMLElement';\nimport { imagesToFetch } from './utils/imagesToFetch';\nimport { px2nm } from './utils/px2nm';\nimport { rad2deg } from './utils/rad2deg';\nimport { x2lon } from './utils/x2lon';\nimport { y2lat } from './utils/y2lat';\n\nexport const updateInfoBox = () => {\n  if (!container) return;\n  const { height, width } = container.getBoundingClientRect();\n\n\n  const lat = y2lat(position.y);\n  const lon = x2lon(position.x);\n  const latMouse = y2lat(position.y + (mouse.y - height / 2) / tileSize);\n  const lonMouse = x2lon(position.x + (mouse.x - width / 2) / tileSize);\n\n  const scale = (() => {\n    let nm = px2nm(lat);\n    let px = 1;\n\n    if (nm >= 1) return `${px2nm(lat).toPrecision(3)}nm/px`;\n    while (nm < 1) {\n      nm *= 10;\n      px *= 10;\n    }\n    return `${nm.toPrecision(3)}nm/${px.toFixed(0)}px`;\n  })();\n\n  infoBox.innerHTML = '';\n  infoBox.append(\n    `Scale: ${scale} (Zoom ${position.z})`,\n    createHTMLElement({ tag: 'br' }),\n    `Lat/Lon: ${rad2deg({ axis: 'NS', pad: 2, phi: lat })} ${rad2deg({ axis: 'EW', pad: 3, phi: lon })}`,\n    createHTMLElement({ tag: 'br' }),\n    `Mouse: ${rad2deg({ axis: 'NS', pad: 2, phi: latMouse })} ${rad2deg({ axis: 'EW', pad: 3, phi: lonMouse })}`,\n    createHTMLElement({ tag: 'br' }),\n    `User: ${rad2deg({ axis: 'NS', pad: 2, phi: position.user.latitude })} ${rad2deg({ axis: 'EW', pad: 3, phi: position.user.longitude })} (@${new Date(position.user.timestamp).toLocaleTimeString()})`,\n    ...imagesToFetch.stateHtml(),\n  );\n};\n", "import type { VirtLayers } from '../../common/types/layers';\nimport type { XYZ } from '../../common/types/xyz';\nimport { updateInfoBox } from '../updateInfoBox';\nimport { createHTMLElement } from './createHTMLElement';\n\nclass ImagesToFetch {\n  constructor () {\n\n  }\n  private xyz2string = ({ x, y, z }: XYZ) => `${z.toString(16)}_${x.toString(16)}_${y.toString(16)}`;\n\n  private data: Partial<Record<VirtLayers, Set<string>>> = {};\n  private total: Partial<Record<VirtLayers, number>> = {};\n\n  private getSet = (source: VirtLayers) => this.data[source] ??= new Set();\n\n  add = ({ source, ...xyz }: XYZ & {source: VirtLayers}) => {\n    this.getSet(source).add(this.xyz2string(xyz));\n    this.total[source] = (this.total[source] ?? 0) + 1;\n    updateInfoBox();\n  };\n  delete = ({ source, ...xyz }: XYZ & {source: VirtLayers}) => {\n    this.getSet(source).delete(this.xyz2string(xyz));\n    if (this.getSet(source).size === 0) delete this.data[source];\n    updateInfoBox();\n  };\n  reset = () => {\n    this.total = {};\n  };\n  state = () => {\n    return Object.entries(this.data)\n    .map(([key, val]) => [key, val.size]);\n  };\n  stateHtml = () => {\n    return this.state()\n    .reduce(\n      (arr, [source, size]) => {\n        arr.push(createHTMLElement({ tag: 'br' }));\n        arr.push(`${source}: ${size}/${this.total[source]}`);\n        return arr;\n      },\n      <(HTMLElement | string)[]>[],\n    );\n  };\n}\n\nexport const imagesToFetch = new ImagesToFetch();\n", "import type { DrawImage } from '../../../common/types/drawImage';\nimport { tileSize } from '../../index';\nimport { frac } from '../../utils/frac';\nimport { imagesToFetch } from '../../utils/imagesToFetch';\n\nexport const drawImage = ({\n  context, scale = 1, source, ttl, x, y, z,\n}: DrawImage): PromiseLike<boolean> => {\n  const src = `/tile/${source}/${[\n    z,\n    Math.floor(x / scale).toString(16),\n    Math.floor(y / scale).toString(16),\n  ].join('/')}?ttl=${ttl}`;\n\n  const sx = Math.floor(frac(x / scale) * scale) * tileSize / scale;\n  const sy = Math.floor(frac(y / scale) * scale) * tileSize / scale;\n  const sw = tileSize / scale;\n\n  imagesToFetch.add({ source, x, y, z });\n  const img = new Image();\n  img.src = src;\n  const prom: Promise<boolean> = new Promise(resolve => {\n    img.onload = () => {\n      context.drawImage(\n        img,\n        sx, sy, sw, sw,\n        0, 0,\n        tileSize, tileSize,\n      );\n      resolve(true);\n      imagesToFetch.delete({ source, x, y, z });\n    };\n    img.onerror = () => {\n      resolve(z > 0 ?\n        drawImage({\n          context,\n          scale: scale << 1,\n          source,\n          ttl,\n          x, y, z: z - 1,\n        }) :\n        false,\n      );\n      imagesToFetch.delete({ source, x, y, z });\n    };\n  });\n  return prom;\n};\n", "import { tileSize } from '../../index';\n\nexport const navionicsWatermark = (async () => {\n  const img = new Image();\n  img.src = '/navionicsWatermark.png';\n  const cnvs = new OffscreenCanvas(256, 256);\n  const ctx = cnvs.getContext('2d');\n  if (!ctx) return null;\n  return new Promise<Uint8ClampedArray>((resolve) => {\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n      resolve(ctx.getImageData(0, 0, tileSize, tileSize).data);\n    };\n    img.onerror = () => {\n      ctx.beginPath();\n      ctx.fillStyle = '#f8f8f8f8';\n      ctx.strokeStyle = '#f8f8f8f8';\n      ctx.fillRect(0, 0, tileSize, tileSize);\n      ctx.fill();\n      ctx.stroke();\n      resolve(ctx.getImageData(0, 0, tileSize, tileSize).data);\n    };\n  });\n})()\n.then(watermark => {\n  if (!watermark) return null;\n  const ret = new Uint8ClampedArray(tileSize * tileSize);\n  for (let i = 0; i < ret.length;i++) {\n    ret[i] = watermark[i * 4];\n  }\n  return ret;\n});\n", "import { tileSize } from '../../index';\nimport { imagesToFetch } from '../../utils/imagesToFetch';\nimport { drawImage } from './drawImage';\nimport { navionicsWatermark } from './navionicsWatermark';\n\nconst backgroundColors = [\n  0x20b0f8,\n  0x58c8f8,\n  0x68c8f8,\n  0x80d0f8,\n  0xa0d8f8,\n  0xa8e0f8,\n  0xb0e0f8,\n  0xc0e8f8,\n  0xf8f8f8,\n].reduce((arr, val) => {\n  const r = val >> 16;\n  const g = val >> 8 & 0xff;\n  const b = val & 0xff;\n  const diff = 2;\n  for (let dr = -diff; dr <= diff; dr++) {\n    for (let dg = -diff; dg <= diff; dg++) {\n      for (let db = -diff; db <= diff; db++) {\n        arr.add((r + dr << 16) + (g + dg << 8) + b + db);\n      }\n    }\n  }\n  return arr;\n}, new Set<number>());\n\nexport const drawNavionics: typeof drawImage = async ({ context, source, ttl, x, y, z }) => {\n  const workerCanvas = new OffscreenCanvas(tileSize, tileSize);\n  const workerContext = workerCanvas.getContext('2d');\n  const watermark = await navionicsWatermark;\n  if (!workerContext || !watermark) return false;\n\n\n  const drawProm = drawImage({ context: workerContext, source, ttl, x, y, z });\n  const draw = await drawProm;\n  if (!draw) return false;\n  imagesToFetch.add({ source: 'transparent', x, y, z });\n  const img = workerContext.getImageData(0, 0, tileSize, tileSize);\n\n  const { data } = img;\n  for (let i = 0; i < watermark.length; i++) {\n    const mask = watermark[i];\n    const [r, g, b] = data.subarray(i * 4, i * 4 + 3).map(v => v * 0xf8 / mask);\n    const color = (r << 16) + (g << 8) + b;\n    if (color === 0x98c800) data[i * 4 + 3] = 0x40;\n    else if (backgroundColors.has(color)) data[i * 4 + 3] = 0;\n  }\n  workerContext.putImageData(img, 0, 0);\n  imagesToFetch.delete({ source: 'transparent', x, y, z });\n\n  context.drawImage(workerCanvas, 0, 0);\n  return true;\n};\n", "import type { DrawImage } from '../../../common/types/drawImage';\nimport type { XYZ } from '../../../common/types/xyz';\nimport { tileSize } from '../../index';\nimport { imagesMap } from '../mapCanvas';\nimport { drawImage } from './drawImage';\nimport { drawNavionics } from './drawNavionics';\n\n\nexport const drawCachedImage = async ({\n  alpha, context, source, trans, ttl, usedImages, x, y, z,\n}: DrawImage & {\n  alpha: number;\n  trans: Pick<XYZ, 'x' | 'y'>;\n  usedImages: Set<string>;\n}): Promise<() => Promise<boolean>> => {\n  const isNavionics = source === 'navionics';\n  const src = `/${source}/${[\n    z,\n    x.toString(16),\n    y.toString(16),\n  ].join('/')}`;\n\n  const drawCanvas = (cnvs: OffscreenCanvas) => {\n    usedImages.add(src);\n    context.globalAlpha = alpha;\n    context.drawImage(\n      cnvs,\n      x * tileSize + trans.x,\n      y * tileSize + trans.y,\n    );\n  };\n\n  const cachedCanvas = await imagesMap[src];\n  if (cachedCanvas) return () => {\n    console.log(`used cached ${src}`);\n    drawCanvas(cachedCanvas);\n    return Promise.resolve(true);\n  };\n  const workerCanvas = new OffscreenCanvas(tileSize, tileSize);\n  const workerContext = workerCanvas.getContext('2d');\n  if (!workerContext) return () => Promise.resolve(true);\n\n\n  const successProm = isNavionics ?\n    drawNavionics({ context: workerContext, source, ttl, x, y, z }) :\n    drawImage({ context: workerContext, source, ttl, x, y, z });\n\n  imagesMap[src] = successProm.then(success => success ? workerCanvas : null);\n  return async () => {\n    const success = await successProm;\n    if (success) {\n      drawCanvas(workerCanvas);\n    }\n\n    return success;\n  };\n};\n", "import type { Size } from '../../common/types/size';\nimport type { XYZ } from '../../common/types/xyz';\nimport { position } from '../globals/position';\nimport { settings } from '../globals/settings';\nimport { tileSize } from '../index';\nimport { createHTMLElement } from '../utils/createHTMLElement';\nimport { drawCachedImage } from './map/drawCachedImage';\n\nexport const imagesMap: Record<string, PromiseLike<OffscreenCanvas | null>> = {};\nexport const createMapCanvas = async ({\n  height, width, x, y, z,\n}: XYZ & Size) => {\n  const canvasWidth = width + 2 * tileSize;\n  const canvasHeight = height + 2 * tileSize;\n  const canvas = createHTMLElement({\n    style: {\n      height: `${canvasHeight}px`,\n      left: `${-tileSize}px`,\n      position: 'absolute',\n      top: `${-tileSize}px`,\n      width: `${canvasWidth}px`,\n    },\n    tag: 'canvas',\n  });\n  canvas.width = canvasWidth;\n  canvas.height = canvasHeight;\n  const context = canvas.getContext('2d');\n  if (!context) return canvas;\n  context.translate(tileSize, tileSize);\n  const trans = {\n    x: Math.round(width / 2 - x * tileSize),\n    y: Math.round(height / 2 - y * tileSize),\n  };\n  const maxdx = Math.ceil((width - trans.x) / tileSize);\n  const maxdy = Math.ceil((height - trans.y) / tileSize);\n  const mindx = - Math.ceil(trans.x / tileSize);\n  const mindy = - Math.ceil(trans.y / tileSize);\n\n  const dxArray: number[] = [];\n  for (let dx = mindx; dx < maxdx; dx++) dxArray.push(dx);\n  const dyArray: number[] = [];\n  for (let dy = mindy; dy < maxdy; dy++) {\n    if (dy >= 0 && dy < position.tiles) dyArray.push(dy);\n  }\n\n  const usedImages: Set<string> = new Set();\n\n  const ttl = Math.max(Math.min(17, z + Math.max(0, position.ttl)) - z, 0);\n  await Promise.all(dxArray.map(async (dx) => {\n    await Promise.all(dyArray.map(dy => {\n      return settings.tiles.order.reduce(async (prom, entry) => {\n        const { alpha, source } = typeof entry === 'string' ? { alpha: 1, source: entry } : entry;\n        if (source && settings.tiles.enabled[source]) {\n          const draw = drawCachedImage({ alpha, context, source, trans, ttl, usedImages, x: dx, y: dy, z });\n          await prom;\n          await (await draw)();\n          console.log('drawed', { dx, dy, source, z });\n        }\n        return prom;\n      }, Promise.resolve());\n    }));\n  })).then(() => {\n    Object.keys(imagesMap).forEach(src => {\n      if (!usedImages.has(src)) delete imagesMap[src];\n    });\n  });\n  return canvas;\n};\n", "import type { Size } from '../../common/types/size';\nimport type { XYZ } from '../../common/types/xyz';\nimport { tileSize } from '../index';\nimport { createHTMLElement } from '../utils/createHTMLElement';\nimport { lat2y } from '../utils/lat2y';\nimport { lon2x } from '../utils/lon2x';\nimport { min2rad } from '../utils/min2rad';\nimport { px2nm } from '../utils/px2nm';\nimport { rad2deg } from '../utils/rad2deg';\nimport { x2lon } from '../utils/x2lon';\nimport { y2lat } from '../utils/y2lat';\n\nconst scales = [\n  0.1,\n  0.2,\n  0.5,\n  1,\n  2,\n  5,\n  10,\n  15,\n  20,\n  30,\n  60,\n  2 * 60,\n  5 * 60,\n  10 * 60,\n  15 * 60,\n  20 * 60,\n  30 * 60,\n  45 * 60,\n];\nconst getScale = (lat: number, minPx = 100) => {\n  const target = px2nm(lat) * minPx;\n  return min2rad(scales.reduce((prev, curr) => {\n    return prev > target ?\n      prev :\n      curr;\n  }, scales[0]));\n};\n\nexport const createNetCanvas = ({\n  height,\n  width,\n  x,\n  y,\n}: Pick<XYZ, 'x' | 'y'> & Size) => {\n  const canvas = createHTMLElement({\n    height: height,\n    style: {\n      height: `${height}px`,\n      position: 'absolute',\n      width: `${width}px`,\n    },\n    tag: 'canvas',\n    width: width,\n  });\n  const context = canvas.getContext('2d');\n  if (!context) return canvas;\n  context.translate(width / 2, height / 2);\n  const lat = y2lat(y);\n  const scaleX = getScale(0, context.measureText(rad2deg({ axis: 'WW', pad: 3, phi: 0 })).width);\n  const scaleY = getScale(lat);\n\n  const left = x - width / 2 / tileSize;\n  const right = x + width / 2 / tileSize;\n  const top = y - height / 2 / tileSize;\n  const bottom = y + height / 2 / tileSize;\n\n  const strokeText = (text: string, x: number, y: number) => {\n    context.strokeText(text, x, y);\n    context.fillText(text, x, y);\n  };\n\n  const latTop = Math.floor(y2lat(top) / scaleY) * scaleY;\n  const latBottom = Math.ceil(y2lat(bottom) / scaleY) * scaleY;\n  const pointsY: {latGrid: number, x1: number, x2: number, y1: number}[] = [];\n  for (let ctr = 0; ctr < 1000; ctr++) {\n    const latGrid = latTop - scaleY * ctr;\n    if (latGrid < latBottom) break;\n    pointsY.push({\n      latGrid,\n      x1: (left - x) * tileSize,\n      x2: (right - x) * tileSize,\n      y1: (lat2y(latGrid) - y) * tileSize,\n    });\n  }\n  const lonLeft = Math.floor(x2lon(left) / scaleX) * scaleX;\n  const lonRight = Math.ceil(x2lon(right) / scaleX) * scaleX;\n  const pointsX: {lonGrid: number, y1: number, y2: number, x1: number}[] = [];\n  for (let ctr = 0; ctr < 1000; ctr++) {\n    const lonGrid = lonLeft + scaleX * ctr;\n    if (lonGrid > lonRight) break;\n    pointsX.push({\n      lonGrid,\n      x1: (lon2x(lonGrid) - x) * tileSize,\n      y1: (top - y) * tileSize,\n      y2: (bottom - y) * tileSize,\n    });\n  }\n\n  context.beginPath();\n  context.strokeStyle = '#808080';\n  pointsY.forEach(({ x1, x2, y1 }) => {\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y1);\n  });\n  pointsX.forEach(({ x1, y1, y2 }) => {\n    context.moveTo(x1, y1);\n    context.lineTo(x1, y2);\n  });\n  context.stroke();\n\n  context.beginPath();\n  context.strokeStyle = '#ffffff';\n  context.fillStyle = '#000000';\n  context.lineWidth = 3;\n  pointsY.forEach(({ latGrid, x1, y1 }) => {\n    strokeText(\n      rad2deg({ axis: 'NS', pad: 2, phi: latGrid }),\n      x1 + 3,\n      y1 - 3,\n    );\n  });\n  pointsX.forEach(({ lonGrid, x1, y1 }) => {\n    strokeText(\n      rad2deg({ axis: 'EW', pad: 3, phi: lonGrid }),\n      x1 + 3,\n      y1 - 3,\n    );\n  });\n  context.fill();\n  context.stroke();\n\n  return canvas;\n};\n", "import { createHTMLElement } from '../utils/createHTMLElement';\n\nexport const overlayContainer = createHTMLElement({\n  style: {\n    left: '0px',\n    position: 'absolute',\n    top: '0px',\n    zIndex: '-100',\n  },\n  tag: 'div',\n  zhilds: [],\n});\n", "import type { Size } from '../common/types/size';\nimport type { XYZ } from '../common/types/xyz';\nimport { createCrosshairsCanvas } from './canvases/crosshairs';\nimport { createMapCanvas } from './canvases/mapCanvas';\nimport { createNetCanvas } from './canvases/net';\nimport { mapContainer } from './containers/mapContainer';\nimport { overlayContainer } from './containers/overlayContainer';\nimport { position } from './globals/position';\nimport { container, tileSize } from './index';\nimport { updateInfoBox } from './updateInfoBox';\nimport { imagesToFetch } from './utils/imagesToFetch';\n\nlet working = false;\nlet newWorker: boolean = false;\n\nfunction moveCanvas ({ canvas, height, width, x, y, z }: XYZ & Size & { canvas: HTMLCanvasElement; }) {\n  const scaleZ = z >= position.map.z ?\n    1 << z - position.map.z :\n    1 / (1 << position.map.z - z);\n  const shiftX = (position.map.x * scaleZ - x) * tileSize;\n  const shiftY = (position.map.y * scaleZ - y) * tileSize;\n\n  canvas.style.height = `${scaleZ * canvas.height}px`;\n  canvas.style.width = `${scaleZ * canvas.width}px`;\n  canvas.style.left = `${(width - canvas.width * scaleZ) / 2 + shiftX}px`;\n  canvas.style.top = `${(height - canvas.height * scaleZ) / 2 + shiftY}px`;\n}\n\nlet map: HTMLCanvasElement | null = null;\n\nexport const redraw = async (type: string) => {\n  if (!container) return;\n  const { height, width } = container.getBoundingClientRect();\n\n  const { tiles, x, y, z } = position;\n\n  const crosshairs = createCrosshairsCanvas({ height, width, x, y });\n  const net = createNetCanvas({ height, width, x, y });\n  overlayContainer.innerHTML = '';\n  overlayContainer.append(crosshairs, net);\n\n\n  updateInfoBox();\n\n  if (map) moveCanvas({ canvas: map, height, width, x, y, z });\n  await new Promise(r => setTimeout(r, 1));\n\n\n  if (working) {\n    if (newWorker) return;\n    newWorker = true;\n    setTimeout(() => {\n      newWorker = false;\n      redraw(type);\n    }, 10);\n    return;\n  }\n  working = true;\n  newWorker = false;\n  console.log(`${type} redraw@${new Date().toISOString()}`);\n\n  await createMapCanvas({ height, width, x, y, z })\n  .then(newCanvas => {\n    if (!container) return;\n    position.x = (position.x + position.tiles) % position.tiles;\n    map = newCanvas;\n    position.map.x = (x + tiles) % tiles;\n    position.map.y = y;\n    position.map.z = z;\n    mapContainer.innerHTML = '';\n    mapContainer.append(newCanvas);\n  });\n\n  const newlocation = `${\n    window.location.origin\n  }${\n    window.location.pathname\n  }?z=${z}&${\n    Object.entries({ ttl: position.ttl, x: position.x, y })\n    .map(([k, v]) => `${k}=${v}`)\n    .join('&')\n  }`;\n  window.history.pushState({ path: newlocation }, '', newlocation);\n  imagesToFetch.reset();\n\n  setTimeout(() => working = false, 100);\n};\n", "import type { Baselayers } from '../../../common/types/layers';\nimport { settings } from '../../globals/settings';\nimport { redraw } from '../../redraw';\nimport { createHTMLElement } from '../../utils/createHTMLElement';\n\nconst baselayerMenuButton = createHTMLElement({\n  classes: ['btn', 'btn-secondary', 'dropdown-toggle'],\n  dataset: {\n    bsToggle: 'dropdown',\n  },\n  role: 'button',\n  tag: 'a',\n  zhilds: ['Baselayer'],\n});\n\nexport const setBaseLayer = (source: Baselayers) => {\n  settings.tiles.baselayers.forEach(key => settings.tiles.enabled[key] = key === source);\n  settings.tiles.order[0] = source;\n  baselayerMenuButton.innerText = source;\n  redraw('changed baselayer');\n};\n\nexport const baselayerMenu = createHTMLElement({\n  classes: ['dropdown'],\n  tag: 'div',\n  zhilds: [\n    baselayerMenuButton,\n    createHTMLElement({\n      classes: ['dropdown-menu'],\n      tag: 'ul',\n      zhilds: [\n        createHTMLElement({\n          tag: 'li',\n          zhilds: settings.tiles.baselayers.map(source => {\n            return createHTMLElement({\n              classes: ['dropdown-item'],\n              onclick: () => setBaseLayer(source),\n              tag: 'a',\n              zhilds: [source || '- none -'],\n            });\n          }),\n        }),\n      ],\n    }),\n  ],\n});\n", "import { units } from '../../globals/units';\nimport { redraw } from '../../redraw';\nimport { createHTMLElement } from '../../utils/createHTMLElement';\n\nexport const coordsToggle = createHTMLElement({\n  classes: ['btn', 'btn-secondary'],\n  onclick: () => {\n    units.coords = {\n      d: <const> 'dm',\n      dm: <const> 'dms',\n      dms: <const> 'd',\n    }[units.coords] ?? 'dm';\n    coordsToggle.innerText = {\n      d: 'Dec',\n      dm: 'D\u00B0M\\'',\n      dms: 'DMS',\n    }[units.coords];\n    redraw('coords changed');\n  },\n  role: 'button',\n  tag: 'a',\n  zhilds: [{\n    d: 'Dec',\n    dm: 'D\u00B0M\\'',\n    dms: 'DMS',\n  }[units.coords]],\n});\n", "import { redraw } from '../../redraw';\nimport { createHTMLElement } from '../../utils/createHTMLElement';\n\nexport const iconButton = ({ active, onclick, src }: { active: () => boolean, onclick: () => void; src: string; }) => {\n  const ret = createHTMLElement({\n    classes: ['btn', active() ? 'btn-success' : 'btn-secondary'],\n    role: 'button',\n    style: {\n      padding: '0.25rem',\n    },\n    tag: 'a',\n    zhilds: [\n      createHTMLElement({\n        src,\n        style: {\n          height: '1.75rem',\n        },\n        tag: 'img',\n      }),\n    ],\n  });\n\n  ret.onclick = () => {\n    onclick();\n    if (active()) {\n      ret.classList.add('btn-success');\n      ret.classList.remove('btn-secondary');\n    }\n    else {\n      ret.classList.add('btn-secondary');\n      ret.classList.remove('btn-success');\n    }\n    redraw('icon clicked');\n  };\n\n  return ret;\n};\n", "import { position } from '../../globals/position';\nimport { iconButton } from './iconButton';\n\nexport const crosshairToggle = iconButton({\n  active: () => position.show.crosshair,\n  onclick: () => position.show.crosshair = !position.show.crosshair,\n  src: 'bootstrap-icons-1.11.2/crosshair.svg',\n});\n", "import type { Layers } from '../../../common/types/layers';\nimport { settings } from '../../globals/settings';\nimport { iconButton } from './iconButton';\n\nexport const overlayToggle = (source: Layers) => iconButton({\n  active: () => Boolean(settings.tiles.enabled[source]),\n  onclick: () => settings.tiles.enabled[source] = !settings.tiles.enabled[source],\n  src: `icons/${source}.svg`,\n});\n", "import { overlayToggle } from './overlayToggle';\n\nexport const navionicsToggle = overlayToggle('navionics');\n", "import { overlayToggle } from './overlayToggle';\n\nexport const vfdensityToggle = overlayToggle('vfdensity');\n", "import { createHTMLElement } from '../utils/createHTMLElement';\nimport { baselayerMenu } from './menu/baselayerMenu';\nimport { coordsToggle } from './menu/coordsToggle';\nimport { crosshairToggle } from './menu/crosshairToggle';\nimport { navionicsToggle } from './menu/navionicsToggle';\nimport { overlayToggle } from './menu/overlayToggle';\nimport { vfdensityToggle } from './menu/vfdensityToggle';\n\n\nexport const menuContainer = createHTMLElement({\n  classes: ['d-flex', 'd-flex-row', 'gap-2', 'm-2'],\n  tag: 'div',\n  zhilds: [\n    baselayerMenu,\n    createHTMLElement({\n      classes: ['btn-group'],\n      role: 'group',\n      tag: 'div',\n      zhilds: [\n        overlayToggle('openseamap'),\n        vfdensityToggle,\n        navionicsToggle,\n        crosshairToggle,\n        coordsToggle,\n      ],\n    }),\n  ],\n});\n", "import { position } from './globals/position';\nimport { updateInfoBox } from './updateInfoBox';\n\nlet geolocationBlocked = false;\nexport const updateGeoLocation = async () => {\n  if (geolocationBlocked) return position.user;\n  await new Promise((resolve: PositionCallback, reject: PositionErrorCallback) => {\n    return navigator.geolocation.getCurrentPosition(\n      resolve,\n      reject,\n      {\n        enableHighAccuracy: true,\n        maximumAge: 0,\n        timeout: 5000,\n      },\n    );\n  })\n  .then((pos) => {\n    const { accuracy, latitude, longitude } = pos.coords;\n    position.user = {\n      accuracy,\n      latitude: latitude * Math.PI / 180,\n      longitude: longitude * Math.PI / 180,\n      timestamp: pos.timestamp,\n    };\n  })\n  .catch((err) => {\n    if (err.code === 1) geolocationBlocked = true;\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  });\n\n  updateInfoBox();\n  return position.user;\n};\n", "import { container, tileSize } from '..';\nimport { setBaseLayer } from '../containers/menu/baselayerMenu';\nimport { coordsToggle } from '../containers/menu/coordsToggle';\nimport { crosshairToggle } from '../containers/menu/crosshairToggle';\nimport { navionicsToggle } from '../containers/menu/navionicsToggle';\nimport { vfdensityToggle } from '../containers/menu/vfdensityToggle';\nimport { updateGeoLocation } from '../getUserLocation';\nimport { mouse } from '../globals/mouse';\nimport { position } from '../globals/position';\nimport { settings } from '../globals/settings';\nimport { redraw } from '../redraw';\nimport { lat2y } from '../utils/lat2y';\nimport { lon2x } from '../utils/lon2x';\n\nconst zoomIn = () => {\n  if (position.z < 20) {\n    position.z++;\n    position.x *= 2;\n    position.y *= 2;\n    position.tiles = 1 << position.z;\n    return true;\n  }\n  return false;\n};\nconst zoomOut = () => {\n  if (position.z > 2) {\n    position.z--;\n    position.x /= 2;\n    position.y /= 2;\n    position.tiles = 1 << position.z;\n    return true;\n  }\n  return false;\n};\n\nexport const onchange = (event: KeyboardEvent | WheelEvent | MouseEvent | UIEvent) => {\n  if (!container) return;\n  const { height, width } = container.getBoundingClientRect();\n  const { type } = event;\n  let needRedraw = false;\n\n  if (event instanceof WheelEvent) {\n    const { clientX, clientY, deltaY } = event;\n\n    if (deltaY > 0) {\n      needRedraw = zoomOut();\n      position.x -= (clientX - width / 2) / tileSize / 2;\n      position.y -= (clientY - height / 2) / tileSize / 2;\n    }\n    else if (deltaY < 0) {\n      needRedraw = zoomIn();\n      position.x += (clientX - width / 2) / tileSize;\n      position.y += (clientY - height / 2) / tileSize;\n    }\n    else {\n      console.log('noop', { deltaY, type });\n      return;\n    }\n  }\n  else if (event instanceof KeyboardEvent) {\n    if (event.isComposing) return;\n    const { key } = event;\n    if (key >= '0' && key <= '9') {\n      setBaseLayer(settings.tiles.baselayers[parseInt(key)]);\n    }\n    else if (key === 'c') crosshairToggle.click();\n    else if (key === 'd') coordsToggle.click();\n    else if (key === 'l') updateGeoLocation();\n    else if (key === 'n') navionicsToggle.click();\n    else if (key === 'v') vfdensityToggle.click();\n    else {\n      needRedraw = true;\n      if (key === 'r') {\n        position.x = Math.round(position.x);\n        position.y = Math.round(position.y);\n      }\n      else if (key === 'u') {\n        position.x = lon2x(position.user.longitude);\n        position.y = lat2y(position.user.latitude);\n      }\n      else if (key === 'ArrowLeft') position.x--;\n      else if (key === 'ArrowRight') position.x++;\n      else if (key === 'ArrowUp') position.y--;\n      else if (key === 'ArrowDown') position.y++;\n      else if (key === 'PageDown') zoomIn();\n      else if (key === 'PageUp') zoomOut();\n      else {\n        needRedraw = false;\n        console.log('noop', { key, type });\n        return;\n      }\n    }\n  }\n  else if (event instanceof MouseEvent) {\n    const { clientX, clientY } = event;\n    position.x = Math.round(position.x * tileSize + (mouse.x - clientX)) / tileSize;\n    position.y = Math.round(position.y * tileSize + (mouse.y - clientY)) / tileSize;\n    needRedraw = true;\n  }\n\n  position.y = Math.max(0, Math.min(position.y, position.tiles));\n  if (needRedraw) redraw(type);\n};\n", "import { mouse } from '../globals/mouse';\nimport { updateInfoBox } from '../updateInfoBox';\nimport { onchange } from './oninput';\n\nexport const onmouse = (event: MouseEvent) => {\n  console.log(event.type);\n  const { clientX, clientY } = event;\n  if (mouse.down) {\n    if (mouse.x !== clientX || mouse.y !== clientY) onchange(event);\n  }\n  mouse.down = Boolean(event.buttons & 1);\n  mouse.x = clientX;\n  mouse.y = clientY;\n  updateInfoBox();\n};\n", "import { infoBox } from './containers/infoBox';\nimport { mapContainer } from './containers/mapContainer';\nimport { menuContainer } from './containers/menuContainer';\nimport { overlayContainer } from './containers/overlayContainer';\nimport { onchange } from './events/oninput';\nimport { onmouse } from './events/onmouse';\nimport { redraw } from './redraw';\nconst {\n  container: containerId = '',\n} = Object.fromEntries(new URL(import.meta.url).searchParams.entries());\n\nexport const container = document.getElementById(containerId);\nif (container) {\n  container.innerHTML = '';\n  container.append(mapContainer, overlayContainer, infoBox, menuContainer);\n}\n\nexport const tileSize = 256;\n\nif (container) {\n  window.addEventListener('keydown', onchange);\n  window.addEventListener('wheel', onchange);\n  window.addEventListener('mousemove', onmouse);\n  window.addEventListener('resize', onchange);\n\n  redraw('initial');\n}\n"],
  "mappings": "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",
  "names": ["x", "x", "y", "x", "y", "radDiv", "x", "y", "z", "ttl", "x", "y", "z", "ttl", "x", "y", "z", "ttl", "x", "y", "z", "x", "y", "z", "ttl", "x", "y", "x2", "y2", "x", "y", "z"]
}
